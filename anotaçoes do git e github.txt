 
 
As configurações do GIT são salvas no arquivo do GIT são as configurações localizadas dentro do arquivo do usuário do Sistema Operacional (Ex.: Windows: C:\Users\Documentos and Settings\ Useronardo ou *n /home/leondo).

As configurações apresentadas através dos comandos abaixo incluídos no arquivo citado acima.

Definir usuário
git config --global user.name "Leonardo Comelli"
Definir e-mail
git config --global user.email leonardo@software-ltda.com.br
Editor Setar
git config --global core.editor vim
Setar ferramenta de mesclagem
git config --global merge.tool vimdiff
Setar arquivos a serem ignorados
git config --global core.excludesfile ~/.gitignore
Listar configurações
git config --list
Ignorar Arquivos
Os arquivos de arquivos de arquivos ou arquivos de execução não foram adicionados a um repositório de arquivos. Existem dois arquivos .gitignore, são eles:

Geral: Normalmente armazenado no diretório do usuário do Sistema Operacional. Os arquivos/diretórios dos arquivos/diretores dos arquivos/diretores devem ser descritos por todos os funcionários anteriores. O arquivo não precisa ter o nome de .gitignore .

Por: Deve ser listado armazenado no administrador dos governos/diretórios e deve conter uma administração específica dos administradores que devem ser ignorados para o substituto.

Repositório Local
novo criar recurso
git init
Verificar estado dos arquivos/diretórios
git status
Adicionar arquivo/diretório (área encenada)
Adicionar um arquivo em específico
git add meu_arquivo.txt
Adicionar um diretório específico
git add meu_diretorio
Adicionar todos os arquivos/diretórios
git add .	
Adicionar um arquivo que esta lista no .gitignore (geral ou do administrador)
git add -f arquivo_no_gitignore.txt
Comitar arquivo/diretório

Comitar um arquivo
git commit meu_arquivo.txt
Comitar vários arquivos
git commit meu_arquivo.txt meu_outro_arquivo.txt
Comitar informando mensagem
git commit meuarquivo.txt -m "minha mensagem de commit"
Remover arquivo/diretório
Remover arquivo
git rm meu_arquivo.txt
Remover pasta
git rm -r diretorio
Histórico
Exibir histórico
git log
Exibir histórico com diff das duas últimas mudanças
git log -p -2
Exibir resumo do histórico (hash completa, autor, data, comentário e qtde de changes (+/-))
git log --stat
Exibir informações resumidas em uma linha (hash completa e comentário)
git log --pretty=oneline
Exibir histórico com formatação específica (hash abreviada, autor, data e comentário)
git log --pretty=format:"%h - %an, %ar : %s"
%h: Abreviação do hash;
%an: Nome do autor;
%ar: Dados;
%s: Comentário.
Verificar as demais opções de formatação no Git Book

Exibir histórico de um arquivo específico
git log -- <caminho_do_arquivo>
histórico de um arquivo específico Exibir uma palavra determinada
git log --summary -S<palavra> [<caminho_do_arquivo>]
Exibir histórico by um arquivo
git log --diff-filter=M -- <caminho_do_arquivo>
O pode ser substituído por: Adicionado (A), Copiado (C), Apagado (D), Modificado (M), Renomeado (R), entre outros.
Exibir histórico de um autor determinado
git log --author=usuario
Exibir revisão e autor da última modificação de um bloco de linhas
git blame -L 12,22 meu_arquivo.txt 
Desfazendo operações
Desfazendo a alteração local (diretório de trabalho)
Este comando deve ser usado enquanto o arquivo não foi adicionado na área encenada .

git checkout -- meu_arquivo.txt
Desfazendo a alteração local (área de encenação)
Este comando deve ser usado quando o arquivo já foi adicionado na área encenada .

git reset HEAD meu_arquivo.txt
Veja o resultado abaixo para exibição, comando reset não alterou ou pasta de trabalho.

Unstaged changes after reset:
M	meu_arquivo.txt
A alteração do diretório pode ser realizada através do comando abaixo:

git checkout meu_arquivo.txt
Repositório Remoto
Exibir os usuários remotos
git remote

git remote -v
Vincular autoridade local com um remoto
git remote add origin git@github.com:leocomelli/curso-git.git
Informações dos usuários remotos
git remote show origin
Renomear um remoto
git remote rename origin curso-git
Desvincular um remoto
git remote rm curso-git
Enviar arquivos/diretórios para o remoto
O primeiro push de um direito remoto deve conter o nome do critério e o branch.

git push -u origin master
Os demais pushes não precisam dessa informação

git push
Diretório local de acordo com o atualizar remoto
Atualizar os arquivos no branch atual
git pull
Buscar as mudanças, mas não aplica-las no branch atual
git fetch
Clonar um remoto já existente
git clone git@github.com:leocomelli/curso-git.git
Tag
Criando uma tag leve
git tag vs-1.1
Criando uma tag anotada
git tag -a vs-1.1 -m "Minha versão 1.1"
Criando uma tag assinada
Para criar uma tag assinada é necessária uma chave privada (GNU Privacy Guard - GPG).

git tag -s vs-1.1 -m "Minha tag assinada 1.1"
Criando tag a partir de um commit (hash)
git tag -a vs-1.2 9fceb02
Criando tags no remoto
git push origin vs-1.2
Criando todas as tags locais no remoto
git push origin --tags
Galhos
O master é o branch principal do GIT.

O HEAD é um ponteiro especial que indica qual é o branch atual. Por padrão, o HEAD aponta para o branch principal, o master .

Criando um novo branch
git branch bug-123
Trocando para um ramo existente
git checkout bug-123
Neste caso o ponteiro principal HEAD está apontando para o branch chamado bug-123.

Criar um novo ramo e trocar
git checkout -b bug-456
Voltar para o branch principal (master)
git checkout master
Resolver merge entre os branches
git merge bug-123
Para realizar a fusão , é necessário receber no branch que deve ser alterado. O merge pode ser automático ou manual. O texto automático será em arquivos que não foram modificados linhas feitas nas mesmas linhas, já o texto será mesclado em textos que não foram modificados nas mesmas linhas.

Uma mensagem indicando um manual de mesclagem será:

Automerging meu_arquivo.txt
CONFLICT (content): Merge conflict in meu_arquivo.txt
Automatic merge failed; fix conflicts and then commit the result.
Apagando um branch
git branch -d bug-123
Listar ramificações
Listar ramificações
git branch
Listar branches com informações dos últimos commits
git branch -v
Listar branches que já foram fundidos (merged) com o master
git branch --merged
Listar branches que não foram fundidos (merged) com o master
git branch --no-merged
Criando sucursais no direito remoto
Criando um branch remoto com o mesmo nome
git push origin bug-123
Criando um branch remoto com nome diferente
git push origin bug-123:new-branch
Baixar um branch remoto para edição
git checkout -b bug-123 origin/bug-123
Apagar filial remota
git push origin:bug-123
Rebase
Fazendo o rebase entre um o branch bug-123 e o master.

git checkout experiment

git rebase master
Mais informações e explicações sobre o Rebase

###Esconder

Para alternar entre um branch é necessário fazer o commit das alterações atuais para depois trocar para um outro branch. Se existe a necessidade de realizar uma troca sem fazer o commit é possível criar um stash . O Stash como se fosse um branch temporário que contem apenas as alterações ainda não foram confirmadas.

Criar um esconderijo
git stash
Listar esconderijos
git stash list
Voltar para o último stash
git stash apply
Voltar para um stash específico
git stash apply stash@{2}
Onde 2 é o índice do estoque desejado.

Criar um branch a partir de um stash
git stash branch meu_branch
Reescrevendo o histórico
Alternando mensagens de commit
git commit --amend -m "Minha nova mensagem"
Alterar os últimos commits
Alterando os três últimos commits

git rebase -i HEAD~3
O editor de texto estará aberto com as representações dos três últimos commits.

pick f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added catfile
Altere para editar os commits que deseja realizar mudanças.

edit f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added catfile
Feche o editor de texto.

Digite o comando para alterar a mensagem do commit que foi marcado como editar .

git commit –amend -m “Nova mensagem”
Aplique uma alteração

git rebase --continue
Atenção: É possível alterar a ordem dos commits ou remover um commit apenas alterando as linhas ou removendo.

Juntando vários commits
Seguir os mesmos passos acima, porém marcar os commtis que devem ser juntados com * squash

Remover todo histórico de um arquivo
git filter-branch --tree-filter 'rm -f passwords.txt' HEAD
Bissecção
O bisect (pesquisa binária) é útil para encontrar um commit que está gerando um bug ou uma inconsistência entre uma sequência de commits.

Iniciar pequinsa binária
git bisect start
Marcar o commit atual como ruim
git bisect bad
Marcar o commit de uma tag que esta sem o bug/inconsistência
git bisect good vs-1.1
Marcar o commit como bom
O GIT irá navegar entre os commits para ajudar a identificar o commit que está com o problema. Se o commit atual não está quebrado, então é necessário marca-lo como bom .

git bisect good
Marcar ou cometer como ruim
Se o commit estiver com problema, então ele deverá ser marcado como ruim .

git bisect bad
Finalizar a pesquisa binária
Depois de encontrar o commit com problema, para retornar para o HEAD utilizar:

git bisect reset